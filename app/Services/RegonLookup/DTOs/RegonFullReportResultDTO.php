<?php

namespace App\Services\RegonLookup\DTOs;

use App\Domain\Common\DTOs\AddressDTO;
use App\Domain\Common\DTOs\CommonCompanyLookupData;
use App\Domain\Common\Enums\AddressType;
use Illuminate\Contracts\Support\Arrayable;

class RegonFullReportResultDTO implements Arrayable, \JsonSerializable
{
    public function __construct(
        public readonly string $regon,
        public readonly string $nip,
        public readonly ?string $nipStatus,
        public readonly string $name,
        public readonly ?string $shortName,
        public readonly string $registrationNumber,
        public readonly string $registrationDate,
        public readonly string $establishmentDate,
        public readonly string $businessStartDate,
        public readonly ?string $regonRegistrationDate,
        public readonly ?string $businessSuspensionDate,
        public readonly ?string $businessResumptionDate,
        public readonly string $lastChangeDate,
        public readonly ?string $businessEndDate,
        public readonly ?string $regonDeletionDate,
        public readonly ?string $bankruptcyDeclarationDate,
        public readonly ?string $bankruptcyEndDate,
        public readonly string $countryCode,
        public readonly string $provinceCode,
        public readonly string $countyCode,
        public readonly string $municipalityCode,
        public readonly string $postalCode,
        public readonly string $postalCityCode,
        public readonly string $cityCode,
        public readonly string $streetCode,
        public readonly string $buildingNumber,
        public readonly ?string $apartmentNumber,
        public readonly ?string $unusualLocation,
        public readonly string $phoneNumber,
        public readonly ?string $internalPhoneNumber,
        public readonly ?string $faxNumber,
        public readonly ?string $email,
        public readonly ?string $website,
        public readonly string $countryName,
        public readonly string $provinceName,
        public readonly string $countyName,
        public readonly string $municipalityName,
        public readonly string $cityName,
        public readonly string $postalCityName,
        public readonly string $streetName,
        public readonly string $legalFormCode,
        public readonly string $detailedLegalFormCode,
        public readonly string $financingFormCode,
        public readonly string $ownershipFormCode,
        public readonly ?string $foundingBodyCode,
        public readonly string $registrationAuthorityCode,
        public readonly string $registryTypeCode,
        public readonly string $legalFormName,
        public readonly string $detailedLegalFormName,
        public readonly string $financingFormName,
        public readonly string $ownershipFormName,
        public readonly ?string $foundingBodyName,
        public readonly string $registrationAuthorityName,
        public readonly string $registryTypeName,
        public readonly int $localUnitsCount,
    ) {
    }

    public static function fromApiResponse(array $data): self
    {
        return new self(
            regon: $data['regon'] ?? '',
            nip: $data['nip'] ?? '',
            nipStatus: $data['nipStatus'] ?? null,
            name: $data['name'] ?? '',
            shortName: $data['shortName'] ?? null,
            registrationNumber: $data['registrationNumber'] ?? '',
            registrationDate: $data['registrationDate'] ?? '',
            establishmentDate: $data['establishmentDate'] ?? '',
            businessStartDate: $data['businessStartDate'] ?? '',
            regonRegistrationDate: $data['regonRegistrationDate'] ?? null,
            businessSuspensionDate: $data['businessSuspensionDate'] ?? null,
            businessResumptionDate: $data['businessResumptionDate'] ?? null,
            lastChangeDate: $data['lastChangeDate'] ?? '',
            businessEndDate: $data['businessEndDate'] ?? null,
            regonDeletionDate: $data['regonDeletionDate'] ?? null,
            bankruptcyDeclarationDate: $data['bankruptcyDeclarationDate'] ?? null,
            bankruptcyEndDate: $data['bankruptcyEndDate'] ?? null,
            countryCode: $data['countryCode'] ?? '',
            provinceCode: $data['provinceCode'] ?? '',
            countyCode: $data['countyCode'] ?? '',
            municipalityCode: $data['municipalityCode'] ?? '',
            postalCode: $data['postalCode'] ?? '',
            postalCityCode: $data['postalCityCode'] ?? '',
            cityCode: $data['cityCode'] ?? '',
            streetCode: $data['streetCode'] ?? '',
            buildingNumber: $data['buildingNumber'] ?? '',
            apartmentNumber: $data['apartmentNumber'] ?? null,
            unusualLocation: $data['unusualLocation'] ?? null,
            phoneNumber: $data['phoneNumber'] ?? '',
            internalPhoneNumber: $data['internalPhoneNumber'] ?? null,
            faxNumber: $data['faxNumber'] ?? null,
            email: $data['email'] ?? null,
            website: $data['website'] ?? null,
            countryName: $data['countryName'] ?? '',
            provinceName: $data['provinceName'] ?? '',
            countyName: $data['countyName'] ?? '',
            municipalityName: $data['municipalityName'] ?? '',
            cityName: $data['cityName'] ?? '',
            postalCityName: $data['postalCityName'] ?? '',
            streetName: $data['streetName'] ?? '',
            legalFormCode: $data['legalFormCode'] ?? '',
            detailedLegalFormCode: $data['detailedLegalFormCode'] ?? '',
            financingFormCode: $data['financingFormCode'] ?? '',
            ownershipFormCode: $data['ownershipFormCode'] ?? '',
            foundingBodyCode: $data['foundingBodyCode'] ?? null,
            registrationAuthorityCode: $data['registrationAuthorityCode'] ?? '',
            registryTypeCode: $data['registryTypeCode'] ?? '',
            legalFormName: $data['legalFormName'] ?? '',
            detailedLegalFormName: $data['detailedLegalFormName'] ?? '',
            financingFormName: $data['financingFormName'] ?? '',
            ownershipFormName: $data['ownershipFormName'] ?? '',
            foundingBodyName: $data['foundingBodyName'] ?? null,
            registrationAuthorityName: $data['registrationAuthorityName'] ?? '',
            registryTypeName: $data['registryTypeName'] ?? '',
            localUnitsCount: (int) ($data['localUnitsCount'] ?? 0),
        );
    }

    public function toArray(): array
    {
        return [
            'regon'                     => $this->regon,
            'nip'                       => $this->nip,
            'nipStatus'                 => $this->nipStatus,
            'name'                      => $this->name,
            'shortName'                 => $this->shortName,
            'registrationNumber'        => $this->registrationNumber,
            'registrationDate'          => $this->registrationDate,
            'establishmentDate'         => $this->establishmentDate,
            'businessStartDate'         => $this->businessStartDate,
            'regonRegistrationDate'     => $this->regonRegistrationDate,
            'businessSuspensionDate'    => $this->businessSuspensionDate,
            'businessResumptionDate'    => $this->businessResumptionDate,
            'lastChangeDate'            => $this->lastChangeDate,
            'businessEndDate'           => $this->businessEndDate,
            'regonDeletionDate'         => $this->regonDeletionDate,
            'bankruptcyDeclarationDate' => $this->bankruptcyDeclarationDate,
            'bankruptcyEndDate'         => $this->bankruptcyEndDate,
            'countryCode'               => $this->countryCode,
            'provinceCode'              => $this->provinceCode,
            'countyCode'                => $this->countyCode,
            'municipalityCode'          => $this->municipalityCode,
            'postalCode'                => $this->postalCode,
            'postalCityCode'            => $this->postalCityCode,
            'cityCode'                  => $this->cityCode,
            'streetCode'                => $this->streetCode,
            'buildingNumber'            => $this->buildingNumber,
            'apartmentNumber'           => $this->apartmentNumber,
            'unusualLocation'           => $this->unusualLocation,
            'phoneNumber'               => $this->phoneNumber,
            'internalPhoneNumber'       => $this->internalPhoneNumber,
            'faxNumber'                 => $this->faxNumber,
            'email'                     => $this->email,
            'website'                   => $this->website,
            'countryName'               => $this->countryName,
            'provinceName'              => $this->provinceName,
            'countyName'                => $this->countyName,
            'municipalityName'          => $this->municipalityName,
            'cityName'                  => $this->cityName,
            'postalCityName'            => $this->postalCityName,
            'streetName'                => $this->streetName,
            'legalFormCode'             => $this->legalFormCode,
            'detailedLegalFormCode'     => $this->detailedLegalFormCode,
            'financingFormCode'         => $this->financingFormCode,
            'ownershipFormCode'         => $this->ownershipFormCode,
            'foundingBodyCode'          => $this->foundingBodyCode,
            'registrationAuthorityCode' => $this->registrationAuthorityCode,
            'registryTypeCode'          => $this->registryTypeCode,
            'legalFormName'             => $this->legalFormName,
            'detailedLegalFormName'     => $this->detailedLegalFormName,
            'financingFormName'         => $this->financingFormName,
            'ownershipFormName'         => $this->ownershipFormName,
            'foundingBodyName'          => $this->foundingBodyName,
            'registrationAuthorityName' => $this->registrationAuthorityName,
            'registryTypeName'          => $this->registryTypeName,
            'localUnitsCount'           => $this->localUnitsCount,
        ];
    }

    public function jsonSerialize(): array
    {
        return $this->toArray();
    }

    public function toCommonLookupData(): CommonCompanyLookupData
    {
        $address = new AddressDTO(
            country: $this->countryCode,
            city: $this->cityName,
            type: AddressType::REGISTERED_OFFICE,
            isDefault: true,
            street: $this->streetName,
            building: $this->buildingNumber,
            flat: $this->apartmentNumber,
            postalCode: $this->postalCode
        );

        return new CommonCompanyLookupData(
            name: $this->name,
            country: $this->countryCode,
            vatId: $this->nip,
            regon: $this->regon,
            shortName: $this->shortName,
            phoneNumber: $this->phoneNumber,
            email: $this->email,
            website: $this->website,
            address: $address,
            bankAccount: null // REGON doesn't provide bank account information
        );
    }
}
