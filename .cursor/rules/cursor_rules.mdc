
- **Required Rule Structure:**
  ```markdown
  ---
  description: Clear, one-line description of what the rule enforces
  globs: path/to/files/*.ext, other/path/**/*
  alwaysApply: boolean
  ---

  - **Main Points in Bold**
    - Sub-points with details
    - Examples and explanations
  ```

- **File References:**
  - Use `[filename](mdc:path/to/file)` ([filename](mdc:filename)) to reference files
  - Example: [prisma.mdc](mdc:.cursor/rules/prisma.mdc) for rule references
  - Example: [schema.prisma](mdc:prisma/schema.prisma) for code references

- **Code Examples:**
  - Use language-specific code blocks
  ```typescript
  // ✅ DO: Show good examples
  const goodExample = true;

  // ❌ DON'T: Show anti-patterns
  const badExample = false;
  ```

- **Rule Content Guidelines:**
  - Start with high-level overview
  - Include specific, actionable requirements
  - Show examples of correct implementation
  - Reference existing code when possible
  - Keep rules DRY by referencing other rules

- **Rule Maintenance:**
  - Update rules when new patterns emerge
  - Add examples from actual codebase
  - Remove outdated patterns
  - Cross-reference related rules

- **Best Practices:**
  - Use bullet points for clarity
  - Keep descriptions concise
  - Include both DO and DON'T examples
  - Reference actual code over theoretical examples
  - Use consistent formatting across rules

- **Use the MakeDomainModel Command for Model Generation**
  - When creating a new domain model (and its DTO, controller, resource, and requests), always use the custom artisan command:
    ```bash
    php artisan make:domain-model {name} {domain}
    ```
    - Replace `{name}` with the model name (StudlyCase)
    - Replace `{domain}` with the domain name (StudlyCase)
  - This command will generate:
    - Model (in `app/Domain/{Domain}/Models/`)
    - DTO (in `app/Domain/{Domain}/DTOs/`)
    - Controller (in `app/Domain/{Domain}/Controllers/`)
    - Resource (in `app/Domain/{Domain}/Resources/`)
    - Requests (in `app/Domain/{Domain}/Requests/`)
  - Do **not** manually create these files—always use the generator for consistency.
  - Follow up with any required customization after generation.

- **Example Usage:**
  ```bash
  php artisan make:domain-model Invoice Billing
  ```
  This will generate all necessary files for the `Invoice` model in the `Billing` domain.
  - Use bullet points for clarity
  - Keep descriptions concise
  - Include both DO and DON'T examples
  - Reference actual code over theoretical examples
  - Use consistent formatting across rules
